#!python

import sys
import importlib

# we defer imports for performance
supported_actions = {
    "sample": "hypercane.actions.sample",
    "report": "hypercane.actions.report",
    "synthesize": "hypercane.actions.synthesize",
    "identify": "hypercane.actions.identify",
    "filter": "hypercane.actions.hfilter",
    "cluster": "hypercane.actions.cluster",
    "rank": "hypercane.actions.rank",
    "order": "hypercane.actions.order"
}

def print_overall_usage():

    print("""hc (Hypercane) is a complex toolchain requiring a supported action and additional arguments

For example:
    hc sample dsa1 -i archiveit=8778 -o story-mementos.txt

    Supported actions:
""")

    for action in supported_actions:
        print("    * {}".format(action))

    print("""
    For each of these actions, you can view additional help by typing --help after the action name, for example:
    hc sample --help
""")


if __name__ == '__main__':

    if len(sys.argv) > 1:

        action = sys.argv[1]

        # print("action: {}".format(action))

        if action == "-h" or action == "--help":
            print_overall_usage()
        elif action == "--version":
            from hypercane.version import __useragent__
            print(__useragent__)
        else:
            try:
                actionmodule = importlib.import_module(supported_actions[action])
            except KeyError:
                print("ERROR: unsupported action {}\n".format(action))
                print_overall_usage()

            if action == 'filter':

                # print("args: {}".format(sys.argv))

                command = sys.argv[2]
                criteria = sys.argv[3]

                if command == 'include-only':

                    if criteria == '-h' or criteria == '--help':

                        actionmodule.print_include_usage()
                    else:
                        actionmodule.include_criteria[criteria](sys.argv[4:])

                elif command == 'exclude':

                    if criteria == '-h' or criteria == '--help':
                        actionmodule.print_exclude_usage()
                    else:
                        actionmodule.exclude_criteria[criteria](sys.argv[4:])

                else:
                    print("ERROR: action filter requires either an 'include-only' or 'exclude' command")

            elif action in supported_actions:
                
                commands = actionmodule.supported_commands

                if len(sys.argv) > 2:

                    command = sys.argv[2]

                    # print("command: {}".format(command))

                    if command in commands:
                        
                        actionmodule.supported_commands[command](
                            sys.argv[3:])
                    else:
                        if command != '-h' and command != '--help':
                            print("ERROR: command {} is not supported for action {}\n".format(
                                command, action
                            ))
                        actionmodule.print_usage()

                else:
                    print("ERROR: action {} requires a command\n".format(action))
                    actionmodule.print_usage()

            else:
                print("ERROR: unsupported action {}\n".format(action))
                print_overall_usage()
    
    else:
        print("ERROR: no action supplied\n")
        print_overall_usage()
