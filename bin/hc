#!python

# This is a wrapper for all Hypercane commands
import sys
import os
import errno
import hypercane.cli.sample, hypercane.cli.identify, \
    hypercane.cli.order, hypercane.cli.cluster, \
    hypercane.cli.score, hypercane.cli.synthesize, \
    hypercane.cli.report, hypercane.cli.filter_includeonly, \
    hypercane.cli.filter_exclude

supported_actions = {
    "sample": hypercane.cli.sample.__file__,
    "report": hypercane.cli.report.__file__,
    "synthesize": hypercane.cli.synthesize.__file__,
    "identify": hypercane.cli.identify.__file__,
    "filter include-only": hypercane.cli.filter_includeonly.__file__,
    "filter exclude": hypercane.cli.filter_exclude.__file__,
    "cluster": hypercane.cli.cluster.__file__,
    "score": hypercane.cli.score.__file__,
    "order": hypercane.cli.order.__file__
}

def print_overall_usage():

    print("""hc (Hypercane) is a framework for building algorithms for sampling mementos from a web archive collection.
It is a complex toolchain requiring a supported action and additional arguments.

For example:
    hc sample DSA1 -i archiveit -a 8778 -o story-mementos.txt

This is the list of supported actions:
""")

    for action in supported_actions:
        print("    * {}".format(action))

    print("""
For each of these actions, you can view additional help by typing --help after the action name, for example:
    hc sample --help

Please read Hypercane's documentation at https://hypercane.readthedocs.io/en/latest/
""")

def print_filter_usage():

    print("""'filter' filters a web archive colleciton by different criteria
    
    Supported commands:
    * include-only - include mementos from the input that satisfy the given criteria
    * exclude - exclude mementos from the input by the given criteria

    Examples:

    hc filter include-only language --lang en,es -i archiveit -a 8788 -o english-and-spanish-docs.tsv -cs mongodb://localhost/cache

    hc filter exclude off-topic -i timemaps -a 8788-timemaps.tsv -o ontopic-mementos.tsv -cs mongodb://localhost/cache

    hc filter exclude near-duplicates -i mementos -a ontopic-mementos.tsv -o novel-content.tsv -cs mongodb://localhost/cache

    hc filter include-only rank "=1" -i mementos -a file-with-scored-mementos.tsv -o filtered-mementos.tsv -cs mongodb://localhost/cache

    """)

if __name__ == '__main__':

    if len(sys.argv) > 1:

        action = sys.argv[1]

        # print("action: {}".format(action))

        if action == "-h" or action == "--help":
            print_overall_usage()
            sys.exit(0)
        elif action == "--version":
            from hypercane.version import __useragent__
            print(__useragent__)
            sys.exit(0)
        else:

            if action == "filter":

                subaction = sys.argv[2]

                # print("subaction: {}".format(subaction))

                if subaction == '--help' or subaction == '-h':
                    print_filter_usage()
                    sys.exit(0)

                action = "{} {}".format(action, subaction)

                args = sys.argv[3:]
            else:
                args = sys.argv[2:]

            # print("action: {}".format(action))

            try:
                scriptname = os.path.abspath(supported_actions[action])
            except KeyError:
                print("hc: error: unknown action {}\n".format(action))
                print_overall_usage()
                sys.exit(errno.EINVAL)

            # print("scriptname: {}".format(scriptname))

            arglist = ""
            for arg in args:
                if ' ' in arg:
                    arglist += '"{}"'.format(arg) + ' '
                else:
                    arglist += arg + ' '

            retval = os.system("python {} {}".format(scriptname, arglist))
            retval = retval >> 8
            sys.exit(retval)

    else:
        print("hc: error: no action supplied\n")
        print_overall_usage()
        sys.exit(errno.EINVAL)
