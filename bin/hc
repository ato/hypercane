#!python

import argparse
import sys

from hypercane.actions import identify, sample, report, reduce, cluster, rank, order, synthesize
from hypercane.version import __useragent__

supported_actions = {
    "sample": sample,
    "report": report,
    "synthesize": synthesize,
    "identify": identify,
    "reduce": reduce,
    "cluster": cluster,
    "rank": rank,
    "order": order
}

def print_overall_usage():

    print("""hc (Hypercane) is a complex toolchain requiring a supported action and additional arguments

For example:
    hc sample dsa1 -i archiveit=8778 -o story-mementos.txt

    Supported actions:
""")

    for action in supported_actions:
        print("    * {}".format(action))

    print("""
    For each of these actions, you can view additional help by typing --help after the action name, for example:
    hc sample --help
""")


if __name__ == '__main__':

    if len(sys.argv) > 1:

        action = sys.argv[1]

        # print("action: {}".format(action))

        if action in supported_actions:
            
            commands = supported_actions[action].supported_commands

            if len(sys.argv) > 2:

                command = sys.argv[2]

                # print("command: {}".format(command))

                if command in commands:
                    
                    supported_actions[action].supported_commands[command](
                        sys.argv[3:])
                else:
                    if command != '-h' and command != '--help':
                        print("ERROR: command {} is not supported for action {}\n".format(
                            command, action
                        ))
                    supported_actions[action].print_usage()

            else:
                print("ERROR: action {} requires a command\n".format(action))
                supported_actions[action].print_usage()

        else:
            if action == "-h" or action == "--help":
                print_overall_usage()
            elif action == "--version":
                print(__useragent__)
            else:
                print("ERROR: unsupported action {}\n".format(action))
                print_overall_usage()
    
    else:
        print("ERROR: no action supplied\n")
        print_overall_usage()
