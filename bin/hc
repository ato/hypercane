#!python

# This is a wrapper for all Hypercane commands

import sys
import os
import hypercane.cli.sample, hypercane.cli.identify, \
    hypercane.cli.order, hypercane.cli.cluster, \
    hypercane.cli.score, hypercane.cli.synthesize

supported_actions = {
    "sample": hypercane.cli.sample.__file__,
    # "report": "hypercane.actions.report",
    "synthesize": hypercane.cli.synthesize.__file__,
    "identify": hypercane.cli.identify.__file__,
    # "filter": "hypercane.actions.hfilter",
    "cluster": hypercane.cli.cluster.__file__,
    "score": hypercane.cli.score.__file__,
    "order": hypercane.cli.order.__file__
}

def print_overall_usage():

    print("""hc (Hypercane) is a framework for building algorithms for sampling mementos from a web archive collection.
It is a complex toolchain requiring a supported action and additional arguments.

For example:
    hc sample dsa1 -i archiveit -a 8778 -o story-mementos.txt

This is the list of supported actions:
""")

    for action in supported_actions:
        print("    * {}".format(action))

    print("""
For each of these actions, you can view additional help by typing --help after the action name, for example:
    hc sample --help
""")

if __name__ == '__main__':

    if len(sys.argv) > 1:

        action = sys.argv[1]

        # print("action: {}".format(action))

        if action == "-h" or action == "--help":
            print_overall_usage()
        elif action == "--version":
            from hypercane.version import __useragent__
            print(__useragent__)
        else:

            args = sys.argv[2:]

            scriptname = os.path.abspath(supported_actions[action])

            arglist = ""
            for arg in args:
                if ' ' in arg:
                    arglist += '"{}"'.format(arg) + ' '
                else:
                    arglist += arg + ' '

            os.system("python {} {}".format(scriptname, arglist))

    else:
        print("hc: error: no action supplied\n")
        print_overall_usage()
